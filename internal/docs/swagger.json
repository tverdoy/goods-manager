{
    "swagger": "2.0",
    "info": {
        "description": "Goods manager APIr",
        "title": "Goods manager",
        "contact": {},
        "version": "1.0"
    },
    "host": "localhost:8080",
    "basePath": "/",
    "paths": {
        "/good/create": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "good"
                ],
                "summary": "Add a new good to the store",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Project ID",
                        "name": "projectId",
                        "in": "query",
                        "required": true
                    },
                    {
                        "description": "Good object that needs to be added to the store",
                        "name": "good",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entity.Good"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Good object that was added",
                        "schema": {
                            "$ref": "#/definitions/entity.Good"
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/good/list": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "good"
                ],
                "summary": "Get list goods",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Offset of select",
                        "name": "offset",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Limit of rows",
                        "name": "limit",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Goods objects and metadata",
                        "schema": {
                            "$ref": "#/definitions/controller.ListResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/good/remove": {
            "delete": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "good"
                ],
                "summary": "Delete good",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Project ID",
                        "name": "projectId",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "ID of good",
                        "name": "id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Good that was deleted",
                        "schema": {
                            "$ref": "#/definitions/entity.Good"
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Good not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/good/reprioritiize": {
            "patch": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "good"
                ],
                "summary": "Reprioritize good priority",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Project ID",
                        "name": "projectId",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "ID of good",
                        "name": "id",
                        "in": "query",
                        "required": true
                    },
                    {
                        "description": "New priority",
                        "name": "good",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controller.PrioritizeRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List goods where was update priority",
                        "schema": {
                            "$ref": "#/definitions/controller.PrioritizeResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Good not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/good/update": {
            "patch": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "good"
                ],
                "summary": "Update good",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Project ID",
                        "name": "projectId",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "ID of good",
                        "name": "id",
                        "in": "query",
                        "required": true
                    },
                    {
                        "description": "Good object that needs update",
                        "name": "good",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entity.Good"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Good that was updated",
                        "schema": {
                            "$ref": "#/definitions/entity.Good"
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Good not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "controller.ListResponse": {
            "type": "object",
            "properties": {
                "goods": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/entity.Good"
                    }
                },
                "meta": {
                    "$ref": "#/definitions/controller.Meta"
                }
            }
        },
        "controller.Meta": {
            "type": "object",
            "properties": {
                "limit": {
                    "type": "integer"
                },
                "offset": {
                    "type": "integer"
                },
                "removed": {
                    "type": "integer"
                },
                "total": {
                    "type": "integer"
                }
            }
        },
        "controller.PrioritizeRequest": {
            "type": "object",
            "properties": {
                "newPriority": {
                    "type": "integer"
                }
            }
        },
        "controller.PrioritizeResponse": {
            "type": "object",
            "properties": {
                "priorities": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/controller.UpratedPriority"
                    }
                }
            }
        },
        "controller.UpratedPriority": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "priority": {
                    "type": "integer"
                }
            }
        },
        "entity.Good": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "priority": {
                    "type": "integer"
                },
                "project_id": {
                    "type": "integer"
                },
                "removed": {
                    "type": "boolean"
                }
            }
        }
    }
}