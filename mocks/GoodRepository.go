// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "goods-manager/internal/domain/entity"

	mock "github.com/stretchr/testify/mock"
)

// GoodRepository is an autogenerated mock type for the GoodRepository type
type GoodRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, good
func (_m *GoodRepository) Create(ctx context.Context, good *entity.Good) error {
	ret := _m.Called(ctx, good)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Good) error); ok {
		r0 = rf(ctx, good)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: ctx, id
func (_m *GoodRepository) Delete(ctx context.Context, id int) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: ctx, id
func (_m *GoodRepository) Get(ctx context.Context, id int) (*entity.Good, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *entity.Good
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (*entity.Good, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) *entity.Good); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Good)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: ctx, limit, offset
func (_m *GoodRepository) List(ctx context.Context, limit int, offset int) ([]*entity.Good, error) {
	ret := _m.Called(ctx, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []*entity.Good
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int) ([]*entity.Good, error)); ok {
		return rf(ctx, limit, offset)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, int) []*entity.Good); ok {
		r0 = rf(ctx, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.Good)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, int) error); ok {
		r1 = rf(ctx, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Reprioritize provides a mock function with given fields: ctx, id, newPriority
func (_m *GoodRepository) Reprioritize(ctx context.Context, id int, newPriority int) (map[int]int, error) {
	ret := _m.Called(ctx, id, newPriority)

	if len(ret) == 0 {
		panic("no return value specified for Reprioritize")
	}

	var r0 map[int]int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int) (map[int]int, error)); ok {
		return rf(ctx, id, newPriority)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, int) map[int]int); ok {
		r0 = rf(ctx, id, newPriority)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[int]int)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, int) error); ok {
		r1 = rf(ctx, id, newPriority)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, good
func (_m *GoodRepository) Update(ctx context.Context, good *entity.Good) error {
	ret := _m.Called(ctx, good)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Good) error); ok {
		r0 = rf(ctx, good)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewGoodRepository creates a new instance of GoodRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGoodRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *GoodRepository {
	mock := &GoodRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
